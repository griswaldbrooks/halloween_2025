[project]
name = "twitching-body"
version = "1.0.0"
description = "Servo-controlled twitching body animatronic for Halloween haunted house"
channels = ["conda-forge"]
platforms = ["linux-64", "osx-64", "osx-arm64"]

[dependencies]
mpg123 = ">=1.31.0"

[tasks]
# === Initial Setup ===
install-arduino-cli = "curl -fsSL https://raw.githubusercontent.com/arduino/arduino-cli/master/install.sh | BINDIR=.pixi/bin sh"

setup-arduino = { cmd = """
.pixi/bin/arduino-cli config init --config-file .arduino15/arduino-cli.yaml || true
.pixi/bin/arduino-cli core update-index --config-file .arduino15/arduino-cli.yaml
.pixi/bin/arduino-cli core install arduino:avr --config-file .arduino15/arduino-cli.yaml
.pixi/bin/arduino-cli lib install Servo --config-file .arduino15/arduino-cli.yaml
.pixi/bin/arduino-cli lib install "Adafruit PWM Servo Driver Library" --config-file .arduino15/arduino-cli.yaml
echo "‚úì Arduino AVR core and libraries installed"
""", depends-on = ["install-arduino-cli"] }

setup = { depends-on = ["setup-arduino"] }

# === Arduino Tasks ===
arduino-detect = ".pixi/bin/arduino-cli board list"

arduino-compile = """
.pixi/bin/arduino-cli compile \
  --fqbn arduino:avr:leonardo \
  --config-file .arduino15/arduino-cli.yaml \
  arduino/twitching_servos
"""

arduino-upload = { cmd = "bash -c 'PORT=$(.pixi/bin/arduino-cli board list | grep Leonardo | awk \"{print \\$1}\" | head -n 1) && cd arduino/twitching_servos && ../../.pixi/bin/arduino-cli upload -p $PORT --fqbn arduino:avr:leonardo --config-file ../../.arduino15/arduino-cli.yaml .'" }

arduino-flash = { depends-on = ["arduino-compile", "arduino-upload"] }

arduino-monitor = { cmd = "bash -c 'PORT=$(.pixi/bin/arduino-cli board list | grep Leonardo | awk \"{print \\$1}\" | head -n 1) && .pixi/bin/arduino-cli monitor -p $PORT -c baudrate=9600'" }

arduino-clean = "rm -rf arduino/twitching_servos/build"

# === Servo Test Tasks ===
test-compile = """
.pixi/bin/arduino-cli compile \
  --fqbn arduino:avr:leonardo \
  --config-file .arduino15/arduino-cli.yaml \
  arduino/servo_test
"""

test-upload = { cmd = "bash -c 'PORT=$(.pixi/bin/arduino-cli board list | grep Leonardo | awk \"{print \\$1}\" | head -n 1) && cd arduino/servo_test && ../../.pixi/bin/arduino-cli upload -p $PORT --fqbn arduino:avr:leonardo --config-file ../../.arduino15/arduino-cli.yaml .'" }

test-flash = { depends-on = ["test-compile", "test-upload"] }

test-monitor = { cmd = "bash -c 'PORT=$(.pixi/bin/arduino-cli board list | grep Leonardo | awk \"{print \\$1}\" | head -n 1) && .pixi/bin/arduino-cli monitor -p $PORT -c baudrate=9600'" }

servo-test = { depends-on = ["test-flash", "test-monitor"] }

test-clean = "rm -rf arduino/servo_test/build"

# === Combined Workflows ===
deploy = { depends-on = ["arduino-flash", "arduino-monitor"] }

# === Development Tasks ===
status = { cmd = "bash -c 'echo \"=== Twitching Body Animatronic Status ===\" && echo \"\" && echo \"‚ö° Arduino CLI:\" && .pixi/bin/arduino-cli version && echo \"\" && echo \"üîå Connected boards:\" && .pixi/bin/arduino-cli board list && echo \"\" && echo \"üìÅ Sketch location:\" && ls -lh arduino/twitching_servos/*.ino'" }

clean-all = { depends-on = ["arduino-clean"] }

# === Troubleshooting ===
check-permissions = """
echo "Checking serial port permissions..."
if [ -e /dev/ttyACM0 ]; then
  ls -la /dev/ttyACM0
  echo ""
  groups | grep -q dialout && echo "‚úì User in dialout group" || echo "‚ùå User NOT in dialout group. Run: sudo usermod -a -G dialout $USER"
else
  echo "No /dev/ttyACM0 found. Is Arduino connected?"
fi
"""

fix-permissions = """
echo "Adding user to dialout group..."
sudo usermod -a -G dialout $USER
echo "‚úì Done! You must log out and back in for this to take effect."
"""

kill-arduino = "bash scripts/kill_arduino.sh"

# === Hardware Testing ===
beetle-test = "bash scripts/beetle_test.sh"

# === Integration Testing ===
integration-test = "bash scripts/integration_test.sh"

# === Audio Testing ===
test-audio = "mpg123 --test raspberry_pi_audio/audio/crying-ghost.mp3"
play-audio = "ffplay -nodisp -autoexit raspberry_pi_audio/audio/crying-ghost.mp3"

[environments]
default = { solve-group = "default" }
